#labels Phase-Design,Phase-Implementation
This page explains how qimsys works with immodule for Qt.

= Call graph =

  # User: Key Press in Qt app
  # Qt: tells to immodule for Qt
  * bool Qt4IMModule::filterEvent(const QEvent `*`event) *plugin*
    * QimsysKeyManager::filter(QString text, int keycode, int modifiers, bool isPress, bool autoRepeat) *lib - client instance*
      * _D-Bus communication_
      * bool QimsysHandler::filter(QString text, int keycode, int modifiers, bool isPress, bool autoRepeat) *lib - server instance*
        * void QimsysKeyFilter::keyEvent(QKeyEvent `*`e) *plugin* - can be ja_JP::Converter
          * void QimsysPreedit::setItems(const QimsysPreeditItemList &items) *lib - client instance*
            * void QimsysPreedit::setItems(const QimsysPreeditItemList &items) *lib - server instance*
              * _D-Bus communication_
              * void QimsysPreedit::itemsChanged(const QimsysPreeditItemList &items) *lib - client instance*
                * void Qt4IMModule::Private::sendPreeditString(const QimsysPreeditItemList &items) *plugin*
                  * send a QInputMethodEvent to Qt